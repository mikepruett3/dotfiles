---
- name: Local Machine Bootstrap
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  no_log: false

  #vars:
  #  flyctl_version: "0.1.130"

  tasks:
    - name: "Get the Running User"
      ansible.builtin.set_fact:
        regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: "Set fact for architecture (x86_64)"
      ansible.builtin.set_fact:
        architecture: "amd64"
      when:
        - ansible_facts['architecture'] == "x86_64"

    - name: "Set fact for architecture (i386)"
      ansible.builtin.set_fact:
        architecture: "i386"
      when:
        - ansible_facts['architecture'] == "i386"

    - name: "Set fact for Session Information"
      ansible.builtin.set_fact:
        desktop: "{{ lookup('ansible.builtin.env', 'DESKTOP_SESSION', default=undef()) }}"
        #wsl: "{{ lookup('ansible.builtin.env', 'WSL_DISTRO_NAME', default=undef()) }}"
      ignore_errors: true

    - name: "Make local .ssh directory"
      ansible.builtin.file:
        path: ~/.ssh/
        state: directory
      become: true
      become_user: '{{ regular_user }}'

    - name: "Make local font directory"
      ansible.builtin.file:
        path: ~/.local/share/fonts/
        state: directory
      become: true
      become_user: '{{ regular_user }}'

    - name: "Make local Apps directory"
      ansible.builtin.file:
        path: ~/Apps/
        state: directory
      become: true
      become_user: '{{ regular_user }}'

    - name: "Make local Applications desktop directory"
      ansible.builtin.file:
        path: ~/.local/share/applications/
        state: directory
      become: true
      become_user: '{{ regular_user }}'

    - name: "Import keyring-apt Playbook"
      ansible.builtin.include_tasks:
        file: keyring-apt.yaml
      when:
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Import {{ ansible_facts['pkg_mgr'] }} Playbook"
      ansible.builtin.include_tasks:
        file: "{{ ansible_facts['pkg_mgr'] }}.yaml"

    - name: "Check if Hack fonts have been installed"
      ansible.builtin.stat:
        path: ~/.local/share/fonts/HackNerdFont-Regular.ttf
      become: true
      become_user: '{{ regular_user }}'
      ignore_errors: true
      register: result

    - name: "Import fonts Playbook"
      ansible.builtin.include_tasks:
        file: fonts.yaml
      when:
        - not result.stat.exists

    - name: "Check if kurzit has been installed"
      ansible.builtin.stat:
        path: ~/.kurzit
      become: true
      become_user: '{{ regular_user }}'
      ignore_errors: true
      register: result

    - name: "Import kurzit Playbook"
      ansible.builtin.include_tasks:
        file: kurzit.yaml
      when:
        - not result.stat.exists

    - name: "Check if Visual Studio Code is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v code
      register: result
      failed_when: result.rc >= 2

    - name: "Import Visual Studio Code Playbook"
      ansible.builtin.include_tasks:
        file: vscode.yaml
      when:
        - result.rc != 0

    - name: "Check if Starship Cross-Shell Prompt is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v starship
      register: result
      failed_when: result.rc >= 2

    - name: "Install Starship Cross-Shell Prompt"
      ansible.builtin.include_role:
        name: andrewrothstein.starship
      when:
        - result.rc != 0

    - name: "Import Go Applications Playbook"
      ansible.builtin.include_tasks:
        file: goapps.yaml

    - name: "Check if Vesktop is installed"
      ansible.builtin.shell:
        cmd: command -v vesktop
      register: result
      failed_when: result.rc >= 2
      when:
        - desktop is defined
        #- desktop == 'hyprland'

    - name: "Import Vesktop Playbook"
      ansible.builtin.include_tasks:
        file: vesktop.yaml
      when:
        - result.rc != 0

    - name: "Check if YouTube-Desktop is installed"
      ansible.builtin.stat:
        path: ~/Apps/YouTube.Desktop.AppImage
      become: true
      become_user: '{{ regular_user }}'
      register: result
      when:
        - desktop is defined

    - name: "Import YouTube-Desktop Playbook"
      ansible.builtin.include_tasks:
        file: youtube.yaml
      when:
        - not result.stat.exists

    - name: "Check if HomeAssistant-Desktop is installed"
      ansible.builtin.stat:
        path: ~/Apps/Home.Assistant.Desktop.AppImage
      become: true
      become_user: '{{ regular_user }}'
      register: result
      when:
        - desktop is defined

    - name: "Import HomeAssistant-Desktop Playbook"
      ansible.builtin.include_tasks:
        file: hass.yaml
      when:
        - not result.stat.exists

    - name: "Check if Obsidian is installed"
      ansible.builtin.stat:
        path: ~/Apps/Obsidian.AppImage
      become: true
      become_user: '{{ regular_user }}'
      register: result
      when:
        - desktop is defined

    - name: "Import Obsidian Playbook"
      ansible.builtin.include_tasks:
        file: obsidian.yaml
      when:
        - not result.stat.exists

    - name: "Check if Plexamp is installed"
      ansible.builtin.stat:
        path: ~/Apps/Plexamp.AppImage
      become: true
      become_user: '{{ regular_user }}'
      register: result
      when:
        - desktop is defined

    - name: "Import Plexamp Playbook"
      ansible.builtin.include_tasks:
        file: plexamp.yaml
      when:
        - not result.stat.exists

    #- name: "Check if Private internet Access VPN client is installed"
    #  ansible.builtin.stat:
    #    path: ~/Apps/Plexamp.AppImage
    #  become: true
    #  become_user: '{{ regular_user }}'
    #  #ignore_errors: true
    #  register: result
    #  when:
    #    - desktop is defined

    #- name: "Import Private internet Access VPN client Playbook"
    #  ansible.builtin.include_tasks:
    #    file: pia.yaml
    #  when:
    #    - not result.stat.exists

    - name: "Check if minio client is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v mc
      register: result
      failed_when: result.rc >= 2
      become: true
      become_user: '{{ regular_user }}'

    - name: "Download and Install the minio client"
      ansible.builtin.get_url:
        url: "https://dl.minio.io/client/mc/release/{{ ansible_facts['system'] | lower }}-{{ architecture | lower }}/mc"
        dest: ~/bin/
        mode: '0750'
      become: true
      become_user: '{{ regular_user }}'
      when:
        - result.rc != 0

    - name: "Force an update to the xdg-desktop-menu"
      ansible.builtin.shell:
        cmd: xdg-desktop-menu forceupdate
      become: true
      become_user: '{{ regular_user }}'

    - name: "Check if connected to Tailnet"
      ansible.builtin.shell:
        cmd: tailscale status
      register: tailnet
      failed_when: tailnet.rc >= 2

    - name: "Check if ~/Images has been created"
      ansible.builtin.stat:
        path: ~/Images
      register: result
      ignore_errors: true
      become: true
      become_user: '{{ regular_user }}'

    - name: "Sync minio storage to ~/Images"
      ansible.builtin.shell:
        cmd: ~/bin/mc cp --recursive minio ~/Images/
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - not result.stat.exists
        - tailnet is defined
        - tailnet.rc == 0
