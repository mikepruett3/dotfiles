---
- name: Local Machine Bootstrap
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  no_log: false

  #vars:
  #  flyctl_version: "0.1.130"

  tasks:
    - name: "Get the Running User"
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: "Set fact for architecture (x86_64)"
      ansible.builtin.set_fact:
        architecture: "amd64"
      when:
        - ansible_facts['architecture'] == "x86_64"

    - name: "Set fact for architecture (i386)"
      ansible.builtin.set_fact:
        architecture: "i386"
      when:
        - ansible_facts['architecture'] == "i386"

    - name: "Set fact for Session Information"
      ansible.builtin.set_fact:
        desktop: "{{ lookup('ansible.builtin.env', 'DESKTOP_SESSION', default=undef()) }}"
        #wsl: "{{ lookup('ansible.builtin.env', 'WSL_DISTRO_NAME', default=undef()) }}"
      ignore_errors: true

    - name: "Make local .ssh directory"
      ansible.builtin.file:
        path: ~/.ssh/
        state: directory
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Make local font directory"
      ansible.builtin.file:
        path: ~/.local/share/fonts/
        state: directory
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Make local Apps directory"
      ansible.builtin.file:
        path: ~/Apps/
        state: directory
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Make local Applications desktop directory"
      ansible.builtin.file:
        path: ~/.local/share/applications/
        state: directory
      become: yes
      become_user: '{{ remote_regular_user }}'

    #- name: "Copy the font to ~/.local/share/fonts"
    #  ansible.builtin.copy:
    #    src: ~/.local/share/chezmoi/fonts/
    #    dest: ~/.local/share/fonts/
    #    remote_src: yes
    #  become: yes
    #  become_user: '{{ remote_regular_user }}'

    - name: "Install packages (dnf)"
      ansible.builtin.dnf:
        name:
          - bat
          - curl
          - dos2unix
          - eza
          - fontconfig
          - fzf
          - git
          - glow
          - golang
          - gpg
          - htop
          - mediainfo
          - neovim
          - pydf
          - poppler-utils
          - 7zip
          - unrar
          - unzip
        state: present
      when:
        - ansible_facts['pkg_mgr'] == 'dnf'

    # Based on https://www.jeffgeerling.com/blog/2022/aptkey-deprecated-debianubuntu-how-fix-ansible
    - name: "Download Charm.sh Keyring"
      ansible.builtin.get_url:
        url: https://repo.charm.sh/apt/gpg.key
        dest: /etc/apt/trusted.gpg.d/charm.asc
        force: true
      when:
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Add the Charm.sh Repository"
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/charm.asc] https://repo.charm.sh/apt/ * *"
        filename: charm
        state: present
      when:
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Download eza Keyring"
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/eza-community/eza/main/deb.asc
        dest: /etc/apt/trusted.gpg.d/gierens.asc
        force: true
      when:
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Add the eza Repository"
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/trusted.gpg.d/gierens.asc] http://deb.gierens.de stable main"
        filename: eza
        state: present
      when:
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Download tailscale Keyring"
      ansible.builtin.get_url:
        url: https://pkgs.tailscale.com/stable/debian/bookworm.noarmor.gpg
        dest: /usr/share/keyrings/tailscale-archive-keyring.gpg
        force: true
      when:
        - desktop is defined
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Add the tailscale Repository"
      ansible.builtin.get_url:
        url: https://pkgs.tailscale.com/stable/debian/bookworm.tailscale-keyring.list
        dest: /etc/apt/sources.list.d/tailscale.list
        force: true
      when:
        - desktop is defined
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Download mullvad Keyring"
      ansible.builtin.get_url:
        url: https://repository.mullvad.net/deb/mullvad-keyring.asc
        dest: /usr/share/keyrings/mullvad-keyring.asc
        force: true
      when:
        - desktop is defined
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Add the mullvad Repository"
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/mullvad-keyring.asc arch=amd64] https://repository.mullvad.net/deb/stable {{ ansible_facts['distribution_release'] }} main"
        filename: mullvad
        state: present
      when:
        - desktop is defined
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Install packages (apt)"
      ansible.builtin.apt:
        name:
          - bat
          - btop
          - curl
          - dos2unix
          - eza
          - fontconfig
          - fzf
          - git
          #- git-credential-manager
          - glow
          - golang-go
          - gpg
          - htop
          #- lf
          - mediainfo
          - neovim
          - pass
          - poppler-utils
          - pydf
          - 7zip
          - unrar-free
          - unzip
        state: present
      when:
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Install Desktop packages (apt - hyprland)"
      ansible.builtin.apt:
        name:
          - kitty
          - wofi
          - waybar
          - hyprpaper
          #- hyprshot
          #- hypridle
          - xdg-desktop-portal-hyprland
          - pavucontrol
          - mako-notifier
          - firefox-esr
          - mullvad-browser
          - chromium
          - bluetooth
          - bluez-tools
          - blueman
          - mpv
          - tailscale
          - bluez
          - bluez-tools
          - cups
          - avahi-daemon
          - libnss-mdns
          - mupdf
          - mupdf-tools
          - swww
          - yt-dlp
          - viewnior
        state: present
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Get Download link of the latest Hack Nerd Font (apt)"
      ansible.builtin.shell:
        cmd: curl -s https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | jq --raw-output '.assets[] | select(.name | endswith("Hack.zip")) | .browser_download_url'
      register: url
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Download the latest Hack Nerd Font (apt)"
      ansible.builtin.get_url:
        url: "{{ url.stdout }}"
        dest: ~/.local/share/fonts/Hack.zip
        mode: '0755'
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Unzip the latest Hack Nerd Font (apt)"
      ansible.builtin.shell:
        cmd: unzip Hack.zip && rm -f Hack.zip
        chdir: ~/.local/share/fonts/
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Install packages (brew)"
      community.general.homebrew:
        name:
          - bat
          - curl
          - dos2unix
          - eza
          - fontconfig
          - fzf
          - git
          - glow
          - go
          - gpg
          - htop
          - mediainfo
          - neovim
          - pydf
          - poppler
          - 7zip
          - rar
          - unzip
        state: present
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
         - ansible_facts['pkg_mgr'] == 'homebrew'

    - name: "Check if Yay is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v yay
      register: result
      #failed_when: result.rc >= 2
      ignore_errors: true

    - name: "Install Yay Package Manager"
      ansible.builtin.include_role:
        name: jahrik.yay
      vars:
        install: true
      when:
        - result.rc != 0
        - ansible_facts['pkg_mgr'] == 'pacman'

    - name: "Install packages (pacman)"
      community.general.pacman:
        name:
          - bat
          - btop
          - curl
          - dos2unix
          - eza
          - fontconfig
          - fzf
          - git
          - git-credential-manager
          - glow
          - go
          - gnupg
          - htop
          - mediainfo
          - neovim
          - pass
          - poppler
          - pydf
          - p7zip
          - tailscale
          - unrar-free
          - unzip
        state: present
      when:
         - ansible_facts['pkg_mgr'] == 'pacman'

    - name: "Install Desktop packages (pacman - hyprland)"
      community.general.pacman:
        name:
          - kitty
          - wofi
          - waybar
          - hyprpaper
          - hypridle
          - hyprlock
          - xdg-desktop-portal-hyprland
          - pamixer
          - pwvucontrol
          - mako
          - mpv
          - firefox
          - chromium
          - bluez
          - bluez-utils
          - blueman
          - cups
          - avahi
          - nss-mdns
          - libmupdf
          - mupdf-gl
          - swww
          - gamemode
          - lib32-gamemode
          - yt-dlp
          - viewnior
        state: present
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'pacman'

    - name: "Install Desktop packages (yay)"
      ansible.builtin.shell:
        cmd: yay -S --needed --noconfirm --noprogressbar {{ item }}
      with_items:
        - cdw
        - ludusavi
        - hyprshot
        - streamdeck-ui
        - ttf-hack-nerd
        - waypaper
        - vesktop-bin
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'pacman'

    - name: "Update the font information cache files"
      ansible.builtin.shell:
        cmd: fc-cache

    - name: "Check if kurzit has been installed"
      ansible.builtin.stat:
        path: ~/.kurzit
      register: result
      ignore_errors: true
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Checkout kurzit from Github"
      ansible.builtin.git:
        repo: https://github.com/mikepruett3/kurzit.git
        dest: ~/.kurzit
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - result.stat.isdir is not defined
        - not result.stat.isdir
        - result.rc != 0

    - name: "Make kurzit executable"
      ansible.builtin.file:
        path: ~/.kurzit/kurzit
        mode: '0750'
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - result.stat.isdir is not defined
        - not result.stat.isdir
        - result.rc != 0

    - name: "Run the kurzit executable"
      ansible.builtin.shell:
        cmd: ~/.kurzit/kurzit
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - result.stat.isdir is not defined
        - not result.stat.isdir
        - result.rc != 0

    - name: "Check if Visual Studio Code is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v code
      register: result
      failed_when: result.rc >= 2

    - name: "Install Visual Studio Code"
      ansible.builtin.include_role:
        #name: gantsign.visual-studio-code
        name: ansible-role-visual-studio-code
      when:
        - result.rc != 0
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] != 'pacman'

    - name: "Install Visual Studio Code (yay)"
      ansible.builtin.shell:
        cmd: yay -S --needed --noconfirm --noprogressbar visual-studio-code-bin
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - result.rc != 0
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'pacman'

    - name: "Check if Starship Cross-Shell Prompt is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v starship
      register: result
      failed_when: result.rc >= 2

    - name: "Install Starship Cross-Shell Prompt"
      ansible.builtin.include_role:
        name: andrewrothstein.starship
      when:
        - result.rc != 0

    - name: "Install ansiart2utf8 go packages"
      ansible.builtin.shell:
        cmd: go install github.com/BourgeoisBear/ansiart2utf8/ansiart2utf8@latest
      environment:
        GOBIN: "/usr/local/bin"

    - name: "Install ascii-image-converter go packages"
      ansible.builtin.shell:
        cmd: go install github.com/TheZoraiz/ascii-image-converter@latest
      environment:
        GOBIN: "/usr/local/bin"

    - name: "Install go-launcher go packages"
      ansible.builtin.shell:
        cmd: go install github.com/mikepruett3/go-launcher@latest
      environment:
        GOBIN: "/usr/local/bin"

    - name: "Install imgconv go packages"
      ansible.builtin.shell:
        cmd: go install github.com/mikepruett3/imgconv@latest
      environment:
        GOBIN: "/usr/local/bin"

    - name: "Install lf go packages"
      ansible.builtin.shell:
        cmd: go install -ldflags="-s -w" github.com/gokcehan/lf@latest
      environment:
        CGO_ENABLED: "0"
        GOBIN: "/usr/local/bin"

    #- name: "Get Download link of the latest Vesktop AppImage client"
    #  ansible.builtin.shell:
    #    cmd: curl -s https://api.github.com/repos/Vencord/Vesktop/releases/latest | jq --raw-output '.assets[] | select(.name | endswith(".AppImage")) | .browser_download_url' | grep -v arm64
    #  register: url
    #  when:
    #    - desktop is defined
    #    - desktop == 'hyprland'

    #- name: "Download and Install the Vesktop client"
    #  ansible.builtin.get_url:
    #    url: "{{ url.stdout }}"
    #    dest: ~/Apps/Vesktop.AppImage
    #    mode: '0755'
    #  become: yes
    #  become_user: '{{ remote_regular_user }}'
    #  when:
    #    - desktop is defined
    #    - desktop == 'hyprland'

    - name: "Create the Desktop file for Vesktop client"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/vesktop.desktop
        mode: '0640'
      vars:
        name: "Vesktop"
        comment: "A custom Discord desktop app"
        exec: "/usr/bin/vesktop"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "vesktop"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Get Download link of the latest YouTube-Desktop AppImage client"
      ansible.builtin.shell:
        cmd: curl -s https://api.github.com/repos/mikepruett3/youtube-desktop/releases/latest | jq --raw-output '.assets[] | select(.name | endswith("AppImage")) | .browser_download_url'
      register: url
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Download and Install the YouTube-Desktop client"
      ansible.builtin.get_url:
        url: "{{ url.stdout }}"
        dest: ~/Apps/YouTube.Desktop.AppImage
        mode: '0755'
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Create the Desktop file for YouTube-Desktop"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/youtube-desktop.desktop
        mode: '0640'
      vars:
        name: "YouTube Desktop"
        comment: "A simple YouTube Desktop application, built using Electron.js"
        exec: "YouTube.Desktop.AppImage"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "youtube-desktop"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Get Download link of the latest Obsidian client"
      ansible.builtin.shell:
        cmd: curl -s https://api.github.com/repos/obsidianmd/obsidian-releases/releases/latest | jq --raw-output '.assets[] | select(.name | endswith("AppImage")) | .browser_download_url' | grep -v arm64
      register: url
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Download and Install the Obsidian client"
      ansible.builtin.get_url:
        url: "{{ url.stdout }}"
        dest: ~/Apps/Obsidian.AppImage
        mode: '0755'
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Create the Desktop file for Obsidian"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/obsidian.desktop
        mode: '0640'
      vars:
        name: "Obsidian"
        comment: "Obsidian"
        exec: "Obsidian.AppImage"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "obsidian"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Download and Install the Plexamp client"
      ansible.builtin.get_url:
        url: "https://plexamp.plex.tv/plexamp.plex.tv/desktop/Plexamp-4.11.2.AppImage"
        dest: ~/Apps/Plexamp.AppImage
        mode: '0755'
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Create the Desktop file for Plexamp"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/plexamp.desktop
        mode: '0640'
      vars:
        name: "Plexamp"
        comment: "Plexamp"
        exec: "Plexamp.AppImage"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "plexamp"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    #- name: "Download the Private internet Access VPN client"
    #  ansible.builtin.get_url:
    #    url: "https://installers.privateinternetaccess.com/download/pia-linux-3.6.1-08339.run"
    #    dest: ~/Downloads
    #    mode: '0755'
    #  become: yes
    #  become_user: '{{ remote_regular_user }}'
    #  when:
    #    - desktop is defined
    #    - desktop == 'hyprland'

    #- name: "Install the Private internet Access VPN client"
    #  ansible.builtin.command:
    #    argv:
    #      - /usr/bin/sh
    #      - -cl ~/Downloads/pia-linux-3.6.1-08339.run
    #      - --quiet
    #      - --accept
    #  become: yes
    #  become_user: '{{ remote_regular_user }}'
    #  when:
    #    - desktop is defined
    #    - desktop == 'hyprland'

    - name: "Check if minio client is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v mc
      register: result
      failed_when: result.rc >= 2
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Download and Install the minio client"
      ansible.builtin.get_url:
        url: "https://dl.minio.io/client/mc/release/{{ ansible_facts['system'] | lower }}-{{ architecture | lower }}/mc"
        dest: ~/bin/
        mode: '0750'
      when:
        - result.rc != 0
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Force an update to the xdg-desktop-menu"
      ansible.builtin.shell:
        cmd: xdg-desktop-menu forceupdate
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Check if connected to Tailnet"
      ansible.builtin.shell:
        cmd: tailscale status
      ignore_errors: true
      register: tailnet

    - name: "Check if ~/Images has been created"
      ansible.builtin.stat:
        path: ~/Images
      register: result
      ignore_errors: true
      become: yes
      become_user: '{{ remote_regular_user }}'

    - name: "Sync minio storage to ~/Images"
      ansible.builtin.shell:
        cmd: ~/bin/mc cp --recursive minio ~/Images/
      become: yes
      become_user: '{{ remote_regular_user }}'
      when:
        - result.stat.isdir is not defined
        - not result.stat.isdir
        - result.rc != 0
        - tailnet is defined
        - tailnet.rc == 0
