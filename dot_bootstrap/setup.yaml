---
- name: Local Machine Bootstrap
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  no_log: false

  #vars:
  #  flyctl_version: "0.1.130"

  tasks:
    - name: "Get the Running User"
      ansible.builtin.set_fact:
        #regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"
        regular_user: "{{ ansible_user_id }}"

    - name: "Set fact for architecture (x86_64)"
      ansible.builtin.set_fact:
        architecture: "amd64"
      when:
        - ansible_facts['architecture'] == "x86_64"

    - name: "Set fact for architecture (i386)"
      ansible.builtin.set_fact:
        architecture: "i386"
      when:
        - ansible_facts['architecture'] == "i386"

    - name: "Set fact for Session Information"
      ansible.builtin.set_fact:
        desktop: "{{ lookup('ansible.builtin.env', 'DESKTOP_SESSION', default=undef()) }}"
        #wsl: "{{ lookup('ansible.builtin.env', 'WSL_DISTRO_NAME', default=undef()) }}"
      ignore_errors: true

    - name: "Make local .ssh directory"
      ansible.builtin.file:
        path: ~/.ssh/
        state: directory
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Make local font directory"
      ansible.builtin.file:
        path: ~/.local/share/fonts/
        state: directory
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Make local Apps directory"
      ansible.builtin.file:
        path: ~/Apps/
        state: directory
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Make local Applications desktop directory"
      ansible.builtin.file:
        path: ~/.local/share/applications/
        state: directory
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Import keyring-apt Playbook"
      ansible.builtin.include_tasks:
        file: keyring-apt.yaml
      when:
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Import {{ ansible_facts['pkg_mgr'] }} Playbook"
      ansible.builtin.include_tasks:
        file: "{{ ansible_facts['pkg_mgr'] }}.yaml"

    - name: "Check if Hack fonts have been installed"
      ansible.builtin.stat:
        path: ~/.local/share/fonts/*NerdFont*.ttf
      become: yes
      become_user: '{{ regular_user }}'
      ignore_errors: true
      register: result

    - name: "Import fonts Playbook"
      ansible.builtin.include_tasks:
        file: fonts.yaml
      when:
        - not result.stat.exists

    - name: "Check if kurzit has been installed"
      ansible.builtin.stat:
        path: "/home/{{ regular_user }}/.kurzit/"
      become: yes
      become_user: '{{ regular_user }}'
      ignore_errors: true
      register: result

    - debug:
        var: result

    - name: "Import kurzit Playbook"
      ansible.builtin.include_tasks:
        file: kurzit.yaml
      when:
        - result.stat.isdir is not defined
        - not result.stat.isdir
        - result.rc != 0

    - name: "Check if Visual Studio Code is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v code
      register: result
      failed_when: result.rc >= 2

    - name: "Import Visual Studio Code Playbook"
      ansible.builtin.include_tasks:
        file: vscode.yaml
      when:
        - result.rc != 0

    - name: "Check if Starship Cross-Shell Prompt is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v starship
      register: result
      failed_when: result.rc >= 2

    - name: "Install Starship Cross-Shell Prompt"
      ansible.builtin.include_role:
        name: andrewrothstein.starship
      when:
        - result.rc != 0

    - name: "Import Go Applications Playbook"
      ansible.builtin.include_tasks:
        file: goapps.yaml

    - name: "Get Download link of the latest Vesktop AppImage client (apt)"
      ansible.builtin.shell:
        cmd: curl -s https://api.github.com/repos/Vencord/Vesktop/releases/latest | jq --raw-output '.assets[] | select(.name | endswith(".deb")) | .browser_download_url' | grep -v arm64
      register: url
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Download and Install the Vesktop client (apt)"
      ansible.builtin.apt:
        deb: "{{ url.stdout }}"
      #become: yes
      #become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Create the Desktop file for Vesktop client (pacman)"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/vesktop.desktop
        mode: '0640'
      vars:
        name: "Vesktop"
        comment: "A custom Discord desktop app"
        exec: "/usr/bin/vesktop"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "vesktop"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'pacman'

    - name: "Create the Desktop file for Vesktop client (apt)"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/vesktop.desktop
        mode: '0640'
      vars:
        name: "Vesktop"
        comment: "A custom Discord desktop app"
        exec: "/opt/Vesktop/vesktop"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "vesktop"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'
        - ansible_facts['pkg_mgr'] == 'apt'

    - name: "Get Download link of the latest YouTube-Desktop AppImage client"
      ansible.builtin.shell:
        cmd: curl -s https://api.github.com/repos/mikepruett3/youtube-desktop/releases/latest | jq --raw-output '.assets[] | select(.name | endswith("AppImage")) | .browser_download_url'
      register: url
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Download and Install the YouTube-Desktop client"
      ansible.builtin.get_url:
        url: "{{ url.stdout }}"
        dest: ~/Apps/YouTube.Desktop.AppImage
        mode: '0755'
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Create the Desktop file for YouTube-Desktop"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/youtube-desktop.desktop
        mode: '0640'
      vars:
        name: "YouTube Desktop"
        comment: "A simple YouTube Desktop application, built using Electron.js"
        exec: "YouTube.Desktop.AppImage"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "youtube-desktop"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Get Download link of the latest HomeAssistant-Desktop AppImage client"
      ansible.builtin.shell:
        cmd: curl -s https://api.github.com/repos/mikepruett3/homeassistant-desktop/releases/latest | jq --raw-output '.assets[] | select(.name | endswith("AppImage")) | .browser_download_url'
      register: url
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Download and Install the HomeAssistant-Desktop client"
      ansible.builtin.get_url:
        url: "{{ url.stdout }}"
        dest: ~/Apps/Home.Assistant.Desktop.AppImage
        mode: '0755'
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Create the Desktop file for HomeAssistant-Desktop"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/homeassistant-desktop.desktop
        mode: '0640'
      vars:
        name: "HomeAssistant Desktop"
        comment: "A simple Home Assistant Desktop application, built using Electron.js"
        exec: "Home.Assistant.Desktop.AppImage"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "homeassistant-desktop"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Get Download link of the latest Obsidian client"
      ansible.builtin.shell:
        cmd: curl -s https://api.github.com/repos/obsidianmd/obsidian-releases/releases/latest | jq --raw-output '.assets[] | select(.name | endswith("AppImage")) | .browser_download_url' | grep -v arm64
      register: url
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Download and Install the Obsidian client"
      ansible.builtin.get_url:
        url: "{{ url.stdout }}"
        dest: ~/Apps/Obsidian.AppImage
        mode: '0755'
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Create the Desktop file for Obsidian"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/obsidian.desktop
        mode: '0640'
      vars:
        name: "Obsidian"
        comment: "Obsidian"
        exec: "Obsidian.AppImage"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "obsidian"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Download and Install the Plexamp client"
      ansible.builtin.get_url:
        url: "https://plexamp.plex.tv/plexamp.plex.tv/desktop/Plexamp-4.11.2.AppImage"
        dest: ~/Apps/Plexamp.AppImage
        mode: '0755'
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    - name: "Create the Desktop file for Plexamp"
      ansible.builtin.template:
        src: desktop.j2
        dest: ~/.local/share/applications/plexamp.desktop
        mode: '0640'
      vars:
        name: "Plexamp"
        comment: "Plexamp"
        exec: "Plexamp.AppImage"
        options: "--enable-features=WaylandWindowDecorations,UseOzonePlatform --ozone-platform=wayland"
        icon: "plexamp"
        terminal: false
        type: "Application"
        startupnotification: true
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - desktop is defined
        - desktop == 'hyprland'

    #- name: "Download the Private internet Access VPN client"
    #  ansible.builtin.get_url:
    #    url: "https://installers.privateinternetaccess.com/download/pia-linux-3.6.1-08339.run"
    #    dest: ~/Downloads
    #    mode: '0755'
    #  become: yes
    #  become_user: '{{ regular_user }}'
    #  when:
    #    - desktop is defined
    #    - desktop == 'hyprland'

    #- name: "Install the Private internet Access VPN client"
    #  ansible.builtin.command:
    #    argv:
    #      - /usr/bin/sh
    #      - -cl ~/Downloads/pia-linux-3.6.1-08339.run
    #      - --quiet
    #      - --accept
    #  become: yes
    #  become_user: '{{ regular_user }}'
    #  when:
    #    - desktop is defined
    #    - desktop == 'hyprland'

    - name: "Check if minio client is installed and in the path"
      ansible.builtin.shell:
        cmd: command -v mc
      register: result
      failed_when: result.rc >= 2
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Download and Install the minio client"
      ansible.builtin.get_url:
        url: "https://dl.minio.io/client/mc/release/{{ ansible_facts['system'] | lower }}-{{ architecture | lower }}/mc"
        dest: ~/bin/
        mode: '0750'
      when:
        - result.rc != 0
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Force an update to the xdg-desktop-menu"
      ansible.builtin.shell:
        cmd: xdg-desktop-menu forceupdate
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Check if connected to Tailnet"
      ansible.builtin.shell:
        cmd: tailscale status
      ignore_errors: true
      register: tailnet

    - name: "Check if ~/Images has been created"
      ansible.builtin.stat:
        path: ~/Images
      register: result
      ignore_errors: true
      become: yes
      become_user: '{{ regular_user }}'

    - name: "Sync minio storage to ~/Images"
      ansible.builtin.shell:
        cmd: ~/bin/mc cp --recursive minio ~/Images/
      become: yes
      become_user: '{{ regular_user }}'
      when:
        - result.stat.isdir is not defined
        - not result.stat.isdir
        - result.rc != 0
        - tailnet is defined
        - tailnet.rc == 0
